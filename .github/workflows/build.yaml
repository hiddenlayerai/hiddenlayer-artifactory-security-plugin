name: Plugin CI

on:
    pull_request: {}
    push:
      branches:
        - main

jobs:
    test-saas:
        name: Test plugin against SaaS model scanner
        runs-on: ubuntu-latest
        env:
            HL_CLIENT_ID: ${{ vars.HL_CLIENT_ID }}
            HL_CLIENT_SECRET: ${{ secrets.HL_CLIENT_SECRET }}
            RT_LICENSE_KEY: ${{ secrets.RT_LICENSE_KEY }}
        steps:
            - uses: actions/checkout@v4
            - name: Setup Java
              uses: actions/setup-java@v4
              with:
                java-version: '11'
                distribution: 'temurin'
            - name: Setup Gradle
              uses: gradle/actions/setup-gradle@v3
            - name: Grant write permission to plugins directory
              # The artifactory service needs to be able to write to the plugins folder
              run: chmod a+rwx -R core/src
            - name: Start containers
              run: docker compose up -d
            - name: Setup tests
              run: gradle artifactory_common
            - name: Run plugin tests
              run: gradle modelscanner
            - name: Stop containers
              if: always()
              run: docker compose down

    test-enterprise:
        name: Test plugin against Enterprise model scanner
        runs-on: ubuntu-latest
        env:
            HL_API_URL: http://modscan-server:8000
            HL_CLIENT_ID: ${{ vars.HL_CLIENT_ID }}
            HL_CLIENT_SECRET: ${{ secrets.HL_CLIENT_SECRET }}
            RT_LICENSE_KEY: ${{ secrets.RT_LICENSE_KEY }}
        steps:
            - uses: actions/checkout@v4
            - name: Setup Java
              uses: actions/setup-java@v4
              with:
                java-version: '11'
                distribution: 'temurin'
            - name: Setup Gradle
              uses: gradle/actions/setup-gradle@v3
            - name: Grant write permission to plugins directory
              # The artifactory service needs to be able to write to the plugins folder
              run: chmod a+rwx -R core/src
            - name: Login to Quay
              uses: docker/login-action@v3
              with:
                registry: quay.io
                username: ${{ vars.QUAY_USERNAME }}
                password: ${{ secrets.QUAY_TOKEN }}
            - name: Start containers
              run: docker compose up -d
            - name: Start Enterprise Model Scanner
              run: docker compose -f src/test/enterprise-modscan/docker-compose.yaml up -d
            - name: Setup tests
              run: gradle artifactory_common
            - name: Run plugin tests
              run: gradle modelscanner
            - name: Stop containers
              if: always()
              run: docker compose down && docker compose -f src/test/enterprise-modscan/docker-compose.yaml down
